
# show branch github in use in terminal bash
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\]$"

# CONFIGS DO .VIMRC ESTAO NO ARQUIVO PERSONALIZADO BASH EM : /$HOME/x/Personal_Bash/.bash_person_rzj
# explorador arquivos >> NERDTree :: c-n
# MUDAR LOCAL VIM_RC :: PARA PASTA ~/Personal_Vim :: AO INVES DO .VIMRC NA RAIZ
# export VIMINIT='source $MYVIMRC' # var que aponta o caminho de abertura do vim rc
# export MYVIMRC='~/.config/nvim/init.lua'
# apontando o arquivo init - se for conforme a extensao em uso .vim ou .lua e depois propag.

# export MYVIMRC='~/.vim/.vimrc'  # apontando caminho do vimrc que configura o vim.

# ESSENCIAIS
alias propag="source ~/.bashrc"
alias obash="cd $HOME/x/PC/_Personal_Bash_/"

# ACESSOS COM CD $var:: Configurar com 'c' de explorer antes do <artefato> :: acessar: cd $oApelido
# export cbash="$HOME/x/Personal_Bash"

# EDITORES
alias n="nvim"
alias c="code ."
alias e="exit"

export cnvim="$HOME/.config/nvim"
export cvim="$HOME/.vim"
export clvim="$HOME/.config/lvim"
alias i="/home/rzj/x/_programas_/intellij_Community/idea-IC-232.9559.62/bin/idea.sh" # itellij


# ATALHOS
alias opgm="cd $HOME/x/_github_rz_/_Pgm_Universal/"
alias obases="cd $HOME/x/_github_rz_/_bases_/"
alias onvim="cd $HOME/.config/nvim/"
alias omusic="cd $HOME/x/_github_rz_/_bases_/music/"
alias odart="cd $HOME/x/_github_rz_/_bases_/dart/"



# SISTEMA
# atualizar sudo apt get
update() {
  sudo apt update
  sudo apt upgrade -y
  sudo apt autoremove -y
  sudo apt autoclean
  sudo apt clean
}

# FUNCOES_RZJ

lf() {
  compgen -A function
  # listar todas funcoes no shell
}

lfn() {
  set | grep $1
  # listar todas funcoes por nome_passado : lfn "Deno"
}

# neste_atalho: rodar arquivoDeno em autoReload
  # uso: dr ARGUMENTAR_O_ARQUIVO
  # dar_todas_permissoes_com: -A, Ã© abreviacao para o --allow-all
  # este_comandoOriginal_sem_atalho: deno run --watch --allow-net --allow-read --allow-env $1
  # parametro_para_argumentarem: $1

# Kotlin --
runkt() { # compilar e rodar arquivo Main.kt
  clear && kotlinc src/Main.kt && kotlin MainKt.class
}

# Run Quarkus : rq
rq() {
  ./mvnw compile quarkus:dev
}

# run arquivo kotlin : inserir para $1 o nome do arquivo e para $2 o nome da classe ex: rk arquivo1 Classe1
rk() {
  /usr/lib/jvm/java-1.17.0-openjdk-amd64/bin/java -javaagent:/home/rzj/x/_programas_/intellij_Community/idea-IC-232.9559.62/lib/idea_rt.jar=45567:/home/rzj/x/_programas_/intellij_Community/idea-IC-232.9559.62/bin -Dfile.encoding=UTF-8 -classpath /home/rzj/x/_github_rz_/_base_linguagens_/kotlin/kotlin_base/B_by_itellij/primeiro_itellij/target/classes:/home/rzj/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.9.0/kotlin-stdlib-1.9.0.jar:/home/rzj/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.0/kotlin-stdlib-common-1.9.0.jar:/home/rzj/.m2/repository/org/jetbrains/annotations/13.0/annotations-13.0.jar $1.$2Kt
}

# insira o nome do arquivo sem extensao - sera gerado o jar do arquivo- vai compilar e printar
printk() {
  kotlinc $1.kt -include-runtime -d $1.jar && java -jar $1.jar
}

# DENO --
# Deno Scripts - enxerga ImportMapJSON ***********************

# DENO RUN
# DenoRun Normal <Argumentar_CaminhoArquivo>
dr() {
  deno run --watch -A $1
}
# denoRun_Enxerga_ImportMapJSON - <Argumentar_CaminhoArquivo>
drj() {
  deno run --watch -A --import-map import_map.json $1
}

# DENO TEST
# denoTestNORMAL
dt() {
  deno test --watch -A
  }

# denoTest_ImportMapJSON
dtj() {
  deno test -A --watch --import-map import_map.json
}

# Deno Scripts - NORMAL ***********************



# UPDATE DENO
denoup() {
  sudo deno upgrade
}

# EDITOR_VSCODE ***********************
keyvs() {
  $1 ~/.config/Code/User/keybindings.json
}

keynvim() {
  $1 ~/.config/nvim/keys/mappings.vim
}

exbash() {
  $1 ~/Personal_Bash/.bash_person_rzj
}

# GITS
delete_brach() {
  git branch -d $1 && git push origin :$1 && git fetch -p
  # input insira o nome da branch alvo
  # aplicabilidade: apos o nome da funcao passe o nome da branch que vai excluir local, remoto e atualizar o repo.
  # deletar branch local e remota e sincronizar atualizar gits local e remoto
}
